name: Testing

on:
  push:
    branches:
      - main
  pull_request:
jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"
          cache: "poetry"
      - name: Install Dependencies
        run: poetry install
      - name: mypy check
        run: |
          poetry run mypy .
  testing:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - name: Install Dependencies
        run: poetry install
      - name: Test with pytest
        run: |
          poetry run coverage run -m pytest
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python-version }}
          path: .coverage.*
  coverage:
    name: Combine & check coverage
    if: always()
    needs: testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"
      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true
      - name: Combine coverage & fail if it's <100%
        run: |
          poetry install
          poetry add coverage -E toml
          poetry run coverage combine
          poetry run coverage html --skip-covered -i
          # Report and write to summary.
          poetry run coverage report --format=markdown -i >> $GITHUB_STEP_SUMMARY
          # Report again and fail if under 100%.
          poetry run coverage report -i --fail-under=100
      - name: Upload HTML report if check failed
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}
